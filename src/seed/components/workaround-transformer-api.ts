/**
 * This module redefines parts of the client for the SEED XML
 * Transformer REST API as a workaround around bugs in the client
 * generated by the OpenAPI generator.
 *
 * This module can be removed if bugs in the OpenAPI generator are fixed:
 * https://github.com/OpenAPITools/openapi-generator/issues/10729
 *
 * A workaround for issue #7 or
 * https://github.com/OpenAPITools/openapi-generator/issues/10729 is
 * the redefinition of transformTransformationPost in the
 * WorkaroundApiAxiosParamCreator. The other objects make use of it
 * and are fixed alternatives for the generated default API methods.
 */

import type { Configuration } from '@scdh/seed-xml-transformer-ts-client/configuration';

import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '@scdh/seed-xml-transformer-ts-client/common';
import type { RequestArgs } from '@scdh/seed-xml-transformer-ts-client/base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from '@scdh/seed-xml-transformer-ts-client/base';

import { RuntimeParameters, DefaultApi } from '@scdh/seed-xml-transformer-ts-client/api'


/**
 * A request parameter creator for this workaround.
 */
export const WorkaroundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
	/**
         * This rewrite fixes issue #7.
	 *
	 *
         * @summary Transform the XML document posted in the request body. Its URL and the runtime parameters are also provided in the request body.
         * @param {string} transformation The ID of the transformation
         * @param {File} source The source document
         * @param {string} [sourceUrl] URL of the source document
         * @param {RuntimeParameters} [runtimeParameters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformTransformationPost: async (transformation: string, source: File, sourceUrl?: string, runtimeParameters?: RuntimeParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transformation' is not null or undefined
            assertParamExists('transformTransformationPost', 'transformation', transformation)
            // verify required parameter 'source' is not null or undefined
            assertParamExists('transformTransformationPost', 'source', source)
            const localVarPath = `/transform/{transformation}`
                .replace(`{${"transformation"}}`, encodeURIComponent(String(transformation)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (source !== undefined) {
                localVarFormParams.append('source', source as any);
            }

            if (sourceUrl !== undefined) {
                localVarFormParams.append('sourceUrl', sourceUrl as any);
            }

            if (runtimeParameters !== undefined) {
		/* code generated by OpenAPI generator: */
                // localVarFormParams.append('runtimeParameters', new Blob([JSON.stringify(runtimeParameters)], { type: "application/json", }));
		/* fixed to */
		// see
                localVarFormParams.append('runtimeParameters', JSON.stringify(runtimeParameters) as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }
    }
}

// export const Workaround7ApiFp = function(configuration?: Configuration) {
//     const localVarAxiosParamCreator = Workaround7ApiAxiosParamCreator(configuration)
//     return {
//         /**
//          *
//          * @summary Transform the XML document posted in the request body. Its URL and the runtime parameters are also provided in the request body.
//          * @param {string} transformation The ID of the transformation
//          * @param {File} source The source document
//          * @param {string} [sourceUrl] URL of the source document
//          * @param {RuntimeParameters} [runtimeParameters]
//          * @param {*} [options] Override http request option.
//          * @throws {RequiredError}
//          */
//         async transformTransformationPost(transformation: string, source: File, sourceUrl?: string, runtimeParameters?: RuntimeParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
//             const localVarAxiosArgs = await localVarAxiosParamCreator.transformTransformationPost(transformation, source, sourceUrl, runtimeParameters, options);
//             return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
//         }
//     }
// }

export const WorkaroundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkaroundApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Transform the XML document posted in the request body. Its URL and the runtime parameters are also provided in the request body.
         * @param {string} transformation The ID of the transformation
         * @param {File} source The source document
         * @param {string} [sourceUrl] URL of the source document
         * @param {RuntimeParameters} [runtimeParameters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transformTransformationPost(transformation: string, source: File, sourceUrl?: string, runtimeParameters?: RuntimeParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transformTransformationPost(transformation, source, sourceUrl, runtimeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        }
    }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const WorkaroundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkaroundApiFp(configuration)
    return {
        /**
         *
         * @summary Transform the XML document posted in the request body. Its URL and the runtime parameters are also provided in the request body.
         * @param {string} transformation The ID of the transformation
         * @param {File} source The source document
         * @param {string} [sourceUrl] URL of the source document
         * @param {RuntimeParameters} [runtimeParameters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transformTransformationPost(transformation: string, source: File, sourceUrl?: string, runtimeParameters?: RuntimeParameters, options?: any): AxiosPromise<File> {
            return localVarFp.transformTransformationPost(transformation, source, sourceUrl, runtimeParameters, options).then((request) => request(axios, basePath));
        }
    }
}



export class WorkaroundApi extends DefaultApi {

    /**
     *
     * @summary Transform the XML document posted in the request body. Its URL and the runtime parameters are also provided in the request body.
     * @param {string} transformation The ID of the transformation
     * @param {File} source The source document
     * @param {string} [sourceUrl] URL of the source document
     * @param {RuntimeParameters} [runtimeParameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public transformTransformationPost(transformation: string, source: File, sourceUrl?: string, runtimeParameters?: RuntimeParameters, options?: AxiosRequestConfig) {
        return WorkaroundApiFp(this.configuration).transformTransformationPost(transformation, source, sourceUrl, runtimeParameters, options).then((request) => request(this.axios, this.basePath));
    }

}
